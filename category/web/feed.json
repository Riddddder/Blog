{
    "version": "https://jsonfeed.org/version/1",
    "title": "初始设定 • All posts by \"web\" category",
    "description": "",
    "home_page_url": "https://Riddddder.github.io",
    "items": [
        {
            "id": "https://riddddder.github.io/2024/10/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/",
            "url": "https://riddddder.github.io/2024/10/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/",
            "title": "怎么处理浏览器兼容性",
            "date_published": "2024-10-29T02:54:42.000Z",
            "content_html": "<h2 id=\"面试官说说你在工作中是怎么处理浏览器兼容性\"><a class=\"markdownIt-Anchor\" href=\"#面试官说说你在工作中是怎么处理浏览器兼容性\">#</a> 面试官：说说你在工作中是怎么处理浏览器兼容性</h2>\n<ul>\n<li>这个问题，是面试官想知道你的学习广度，你的知识体系是否全面。其实在平时的开发过程中，谁会注意这些呀（业务都写不完，还考虑兼容性，吃饱了撑了嘛）</li>\n<li>其实针对前端三部分（HTML、CSS、JavaScript），考虑浏览器兼容性只有 CSS 和 JavaScript；因为针对 HTML，在开发中就常用的几个标签，浏览器从头到脚都认识，还需要兼容吗？</li>\n<li>针对 CSS 的兼容性，你只需要有添加前缀，变量转换等意识即可</li>\n<li>针对 JavaScript 的兼容性，你只需要有语法降级等意识即可。</li>\n<li>只需要有这两个意识就行，实现就不需要你从头到尾的写，而是借助工具即可</li>\n</ul>\n<h3 id=\"css-兼容性\"><a class=\"markdownIt-Anchor\" href=\"#css-兼容性\">#</a> CSS 兼容性</h3>\n<h4 id=\"浏览器前缀\"><a class=\"markdownIt-Anchor\" href=\"#浏览器前缀\">#</a> 浏览器前缀</h4>\n<ul>\n<li>\n<p>浏览器前缀是浏览器厂商为了实验性 CSS 属性而添加的标识符，它们通常用于 CSS 规则的前面。以下是一些常见的浏览器前缀：</p>\n</li>\n<li>\n<p>webkit-：用于 Chrome、Safari（WebKit 内核）</p>\n</li>\n<li>\n<p>moz-：用于 Firefox（Gecko 内核）</p>\n</li>\n<li>\n<p>o-：用于 Opera（Presto 内核，已逐渐淘汰）</p>\n</li>\n<li>\n<p>ms-：用于 Internet Explorer（Trident 内核）</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>); <span class=\"comment\">/* Chrome, Safari */</span></span><br><span class=\"line\">  -moz-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);    <span class=\"comment\">/* Firefox */</span></span><br><span class=\"line\">  -ms-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);     <span class=\"comment\">/* IE */</span></span><br><span class=\"line\">  -o-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);      <span class=\"comment\">/* Opera */</span></span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);         <span class=\"comment\">/* 标准语法 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>为了简化这个过程，可以使用一些工具自动添加浏览器前缀：</p>\n</li>\n<li>\n<p>Autoprefixer：一个后处理工具，可以根据 Can I Use 的数据自动添加所需的浏览器前缀。</p>\n</li>\n<li>\n<p>PostCSS：一个使用 JavaScript 的插件系统，可以处理 CSS 的转换，包括添加前缀。</p>\n</li>\n</ul>\n<h4 id=\"变量转换\"><a class=\"markdownIt-Anchor\" href=\"#变量转换\">#</a> 变量转换</h4>\n<p>CSS 变量的兼容性问题较少，因为它们已经成为 CSS 的一个标准部分。但是，为了确保在不支持 CSS 变量的旧浏览器中也能正常显示，可以使用以下方法：</p>\n<ul>\n<li>回退值：在 var () 函数中提供回退值。</li>\n<li>PostCSS：使用 PostCSS 插件将 CSS 变量转换为静态值。</li>\n</ul>\n<h3 id=\"javascript-的兼容性\"><a class=\"markdownIt-Anchor\" href=\"#javascript-的兼容性\">#</a> JavaScript 的兼容性</h3>\n<ul>\n<li>新语法兼容作转换</li>\n<li>新函数兼容加补丁</li>\n</ul>\n<h4 id=\"babel\"><a class=\"markdownIt-Anchor\" href=\"#babel\">#</a> babel</h4>\n<ul>\n<li>再来说说 JavaScript 的兼容性吧，其实在开发过程中，最常见的就是跟 JavaScript 打交道，也会真实感受到 JavaScript 存在新的语法，那么这些新的语法就需要转化，才能被浏览器认识。那么这时候就可以借助一个工具 babel。用于专门来降低 JavaScript 语法的。</li>\n<li>babel 就是一个编译器，把一段源代码转化成另外一段新代码，新代码就能被浏览器识别。对了，既然 babel 是工具（postcss 也是一样），能单独使用，也能够配合使用。而我们在项目开发过程中，都会使用构建工具（比如说 webpack），但是又想使用 babel 工具，那么这时候就需要一个桥梁，而 webpack 中的桥梁就是 babel-loader，具体怎么操作你回去研究一下。</li>\n</ul>\n<h4 id=\"polyfill\"><a class=\"markdownIt-Anchor\" href=\"#polyfill\">#</a> polyfill</h4>\n<ul>\n<li>\n<p>手动打补丁</p>\n</li>\n<li>\n<p>根据覆盖率自动打补丁</p>\n</li>\n<li>\n<p>根据浏览器特性，动态打补丁</p>\n</li>\n<li>\n<p>JS 代码能够被转化减低，适配了市场占比的浏览器，是不是就已经完成了呢？当然没有。<br>\n在 ES6 中出现了 Promise，fetch，以及数组和字符串新的方法，babel 会进行转化吗？会转化成什么呢？肯定不会被转化撒，因为它们都是函数调用，对于 babel 来说就是一个普通的函数调用，只是找不到函数的实现体而已，只是会报错而已。</p>\n</li>\n<li>\n<p>那么这里也就需要兼容一下，因为新版本的浏览器是认识的，老版本的浏览器是不认识的，那么这里就需要为了兼容了老版浏览器，新部署一个 JS 文件（类似补丁），里面存放了各个函数（promise, fetch）体的实现代码。然后浏览器就能够正常的识别了。</p>\n</li>\n</ul>\n<h3 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\">#</a> 参考文章</h3>\n<p><a href=\"https://juejin.cn/post/7237022892055281724\">掘金文章 - 面试官：说说你在工作中是怎么处理浏览器兼容性</a></p>\n",
            "tags": [
                "web",
                "浏览器",
                "兼容性"
            ]
        },
        {
            "id": "https://riddddder.github.io/2024/10/24/node%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/",
            "url": "https://riddddder.github.io/2024/10/24/node%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/",
            "title": "（已解决）Node打包报错 FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed",
            "date_published": "2024-10-24T03:51:00.000Z",
            "content_html": "<h2 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<ul>\n<li>在一次使用 vue-element-plus-admin 打包时，出现如下报错: FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript</li>\n</ul>\n<h3 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\">#</a> 解决方法</h3>\n<ul>\n<li>本项目中使用 [选择自己的方式]</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install increase-memory-limit --save</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  cross-env --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改 package.json 如下:[LIMIT 大小自己设置]</li>\n</ul>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;fix-memory-limit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env LIMIT=2048 increase-memory-limit&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>最后执行就可以打包啦</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run fix-memory-limit</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "node"
            ]
        }
    ]
}