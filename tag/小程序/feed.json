{
    "version": "https://jsonfeed.org/version/1",
    "title": "初始设定 • All posts by \"小程序\" tag",
    "description": "",
    "home_page_url": "https://Riddddder.github.io",
    "items": [
        {
            "id": "https://riddddder.github.io/2024/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%B7%AF%E7%94%B1%E6%94%B9%E9%80%A0/",
            "url": "https://riddddder.github.io/2024/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%B7%AF%E7%94%B1%E6%94%B9%E9%80%A0/",
            "title": "小程序的路由改造",
            "date_published": "2024-08-26T11:59:24.000Z",
            "content_html": "<p>众所周知，在小程序中跳转页面的方法除了 navigateTo，还有 redirectTo，reLaunch，switchTab。</p>\n<p>但是这些方法都有一些限制，比如 redirectTo 和 reLaunch 不能打开 tabBar 页面，navigateTo 和 switchTab 不能打开非 tabBar 页面。</p>\n<p>为了解决这个问题，我们需要对小程序的路由进行改造，使其能够满足我们的需求。</p>\n<p>首先，我们需要创建一个全局的路由对象，用于存储所有的页面路径和对应的页面组件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = &#123;</span><br><span class=\"line\">  <span class=\"attr\">pages</span>: [],</span><br><span class=\"line\">  <span class=\"title function_\">addPage</span>(<span class=\"params\">page</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pages</span>.<span class=\"title function_\">push</span>(page);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">getPage</span>(<span class=\"params\">path</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">pages</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">page</span> =&gt;</span> page.<span class=\"property\">path</span> === path);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br></pre></td></tr></table></figure>\n<p>然后，我们需要在每个页面组件中注册自己的路径和对应的页面组件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">addPage</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/pages/index/index&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./index&#x27;</span>).<span class=\"property\">default</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>接下来，我们需要在 app.js 中初始化路由对象，并注册全局的路由方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">App</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">onLaunch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化路由对象</span></span><br><span class=\"line\">    router.<span class=\"property\">pages</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">pages</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">navigateTo</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = router.<span class=\"title function_\">getPage</span>(options.<span class=\"property\">url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (page) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果页面存在，则跳转到对应的页面</span></span><br><span class=\"line\">      page.<span class=\"property\">component</span>.<span class=\"title function_\">navigateTo</span>(options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果页面不存在，则跳转到404页面</span></span><br><span class=\"line\">      wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/pages/404/404&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">redirectTo</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = router.<span class=\"title function_\">getPage</span>(options.<span class=\"property\">url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (page) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果页面存在，则跳转到对应的页面</span></span><br><span class=\"line\">      page.<span class=\"property\">component</span>.<span class=\"title function_\">redirectTo</span>(options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果页面不存在，则跳转到404页面</span></span><br><span class=\"line\">      wx.<span class=\"title function_\">redirectTo</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/pages/404/404&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 其他路由方法...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>最后，我们需要在每个页面组件中实现自己的路由方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Page</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">navigateTo</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    wx.<span class=\"title function_\">navigateTo</span>(options);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">redirectTo</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    wx.<span class=\"title function_\">redirectTo</span>(options);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 其他页面方法...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>通过以上改造，我们就可以在全局范围内使用统一的路由方法，并且可以根据需要动态加载页面组件。这样不仅提高了代码的可维护性，还使得路由管理更加灵活和可扩展。</p>\n",
            "tags": [
                "小程序"
            ]
        }
    ]
}