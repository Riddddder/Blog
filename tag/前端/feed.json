{
    "version": "https://jsonfeed.org/version/1",
    "title": "初始设定 • All posts by \"前端\" tag",
    "description": "",
    "home_page_url": "https://Riddddder.github.io",
    "items": [
        {
            "id": "https://riddddder.github.io/2022/01/10/localStorage%E5%92%8CsessionStorage/",
            "url": "https://riddddder.github.io/2022/01/10/localStorage%E5%92%8CsessionStorage/",
            "title": "前端笔记（四）：localStorage和sessionStorage",
            "date_published": "2022-01-10T04:51:59.000Z",
            "content_html": "<h2 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\">#</a> 基本概念</h2>\n<p>localStorage 和 sessionStorage 都是 Web Storage API 的一部分，用于在客户端存储数据。它们都是键值对存储，可以存储字符串数据，也可以存储对象数据。</p>\n<h2 id=\"区别\"><a class=\"markdownIt-Anchor\" href=\"#区别\">#</a> 区别</h2>\n<p>localStorage 和 sessionStorage 的主要区别在于数据的生命周期。localStorage 的数据会一直存在，直到手动删除，而 sessionStorage 的数据在页面会话结束时会被清除。</p>\n<h3 id=\"作用域不同\"><a class=\"markdownIt-Anchor\" href=\"#作用域不同\">#</a> 作用域不同</h3>\n<ul>\n<li>sessionStorage 的作用域限定在当前会话（当前浏览器标签页或窗口）。</li>\n<li>localStorage 的作用域是永久的，数据在不同会话（遵循同源策略）之间共享。</li>\n</ul>\n<h3 id=\"生命周期不同\"><a class=\"markdownIt-Anchor\" href=\"#生命周期不同\">#</a> 生命周期不同</h3>\n<ul>\n<li>sessionStorage 的数据在会话结束时被清除，即当用户关闭浏览器标签页或窗口时，sessionStorage 中的数据会被删除。</li>\n<li>localStorage 的数据是持久化的，除非被显式清除，否则会一直保存在客户端。</li>\n</ul>\n<h3 id=\"存储大小不同\"><a class=\"markdownIt-Anchor\" href=\"#存储大小不同\">#</a> 存储大小不同</h3>\n<ul>\n<li>sessionStorage 的存储容量通常比 localStorage 小。一般来说，sessionStorage 的容量限制在 5MB 左右。</li>\n<li>localStorage 的容量限制通常在 5MB 到 10MB 之间，不同浏览器可能会有所不同。</li>\n</ul>\n<h3 id=\"数据共享不同\"><a class=\"markdownIt-Anchor\" href=\"#数据共享不同\">#</a> 数据共享不同</h3>\n<ul>\n<li>sessionStorage 的数据在同一个浏览器标签页或窗口中共享，但不会跨标签页或窗口共享。</li>\n<li>localStorage 的数据在同一个域名下的所有标签页和窗口中共享。</li>\n</ul>\n<h2 id=\"使用场景\"><a class=\"markdownIt-Anchor\" href=\"#使用场景\">#</a> 使用场景</h2>\n<ul>\n<li>sessionStorage 适用于存储需要在同一会话中共享的数据，例如用户的登录状态、表单数据等。当用户关闭浏览器标签页或窗口时，这些数据会被自动清除。</li>\n<li>localStorage 适用于存储需要在多个会话中共享的数据，例如用户的偏好设置、购物车数据等。这些数据会一直保存在客户端，直到被显式清除。</li>\n</ul>\n<h2 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\">#</a> 使用方法</h2>\n<h3 id=\"localstorage\"><a class=\"markdownIt-Anchor\" href=\"#localstorage\">#</a> localStorage</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储数据</span></span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;key&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除数据</span></span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">removeItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空所有数据</span></span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">clear</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"sessionstorage\"><a class=\"markdownIt-Anchor\" href=\"#sessionstorage\">#</a> sessionStorage</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储数据</span></span><br><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;key&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除数据</span></span><br><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">removeItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空所有数据</span></span><br><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">clear</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h2>\n<ul>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储遵循同源策略，即只有在相同域名、相同协议和相同端口下的页面才能访问这些数据。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储是同步的，即调用  <code>setItem</code> 、 <code>getItem</code> 、 <code>removeItem</code>  和  <code>clear</code>  方法会立即生效，不会阻塞页面的渲染。因此，在调用这些方法时，需要注意不要在关键路径上使用它们，以免影响页面的性能。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储是字符串类型的，如果需要存储非字符串类型的数据，可以使用  <code>JSON.stringify</code>  和  <code>JSON.parse</code>  方法进行序列化和反序列化。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储是持久化的，即数据不会在页面关闭后自动清除。如果需要清除数据，可以使用  <code>removeItem</code>  或  <code>clear</code>  方法。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储大小有限制，一般为 5MB 左右，不同浏览器可能会有所不同。如果需要存储大量数据，可以考虑使用其他存储方式，如 IndexedDB。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储是安全的，即数据不会被第三方脚本访问。但是，如果页面中存在 XSS 攻击，攻击者可以通过注入恶意脚本访问这些数据。因此，在使用 localStorage 和 sessionStorage 时，需要注意不要存储敏感数据，以免造成安全风险。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储是可被浏览器清除的，如用户手动清除浏览器缓存、浏览器崩溃等。因此，在使用 localStorage 和 sessionStorage 时，需要注意数据的持久化和安全性。</p>\n</li>\n</ul>\n",
            "tags": [
                "学习",
                "面试",
                "前端"
            ]
        },
        {
            "id": "https://riddddder.github.io/2021/07/19/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://riddddder.github.io/2021/07/19/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "前端笔记（二）:ES6学习笔记",
            "date_published": "2021-07-19T04:32:04.000Z",
            "content_html": "<h2 id=\"es6学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#es6学习笔记\">#</a> ES6 学习笔记</h2>\n<h3 id=\"let和const\"><a class=\"markdownIt-Anchor\" href=\"#let和const\">#</a> let 和 const</h3>\n<h3 id=\"symbol\"><a class=\"markdownIt-Anchor\" href=\"#symbol\">#</a> symbol</h3>\n<ul>\n<li>Symbol 是 ES6 中引入的一种新的基本数据类型，用于表示一个独一无二的值，不能与其他数据类型进行运算。它是 JavaScript 中的第七种数据类型</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">//Symbol()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Symbol</span>();<span class=\"comment\">//报错，Symbol is not a constructor，因为Symbol是基本数据类型，而不是对象，不能 new 。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"class\"><a class=\"markdownIt-Anchor\" href=\"#class\">#</a> class</h3>\n<h3 id=\"字符串新特性\"><a class=\"markdownIt-Anchor\" href=\"#字符串新特性\">#</a> 字符串新特性</h3>\n<h4 id=\"模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#模板字符串\">#</a> 模板字符串</h4>\n<ul>\n<li>使用反引号 `` 和 ${} 来引用变量</li>\n</ul>\n<h4 id=\"字符串新方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串新方法\">#</a> 字符串新方法</h4>\n<ul>\n<li>includes () 判断字符串是否包含参数字符串，返回 boolean 值。</li>\n<li>startsWith () /endsWith ()，判断字符串是否以参数字符串开头或结尾。返回 boolean 值。这两个方法可以有第二个参数，一个数字，表示开始查找的位置</li>\n<li>repeat () 方法按指定次数返回一个新的字符串。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello&quot;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">2</span>)<span class=\"comment\">//&quot;hellohello&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>padStart ()/padEnd ()，用参数字符串按给定长度从前面或后面补全字符串，返回新字符串。</li>\n</ul>\n<h3 id=\"数组新方法\"><a class=\"markdownIt-Anchor\" href=\"#数组新方法\">#</a> 数组新方法</h3>\n<p>Array.from () 是内置对象 Array 的方法，实例数组不能调用<br>\n includes () 参数：数值 -------- 返回值：true/false<br>\nmap ()、filter () 参数：函数 -------- 返回值：数组<br>\n forEach () 参数：函数 -------- 返回值：undefined<br>\nfind () 参数：函数 -------- 返回值：数值<br>\n some ()、every () 参数：函数 -------- 返回值：true/false</p>\n<h3 id=\"object新方法\"><a class=\"markdownIt-Anchor\" href=\"#object新方法\">#</a> object 新方法</h3>\n<ul>\n<li><a href=\"http://Object.is\">Object.is</a>()</li>\n<li>Object.assign()</li>\n<li>Object.keys()</li>\n<li>Object.values()</li>\n<li>Object.entries()</li>\n</ul>\n<h3 id=\"对象扩展符\"><a class=\"markdownIt-Anchor\" href=\"#对象扩展符\">#</a> 对象扩展符</h3>\n<h4 id=\"拷贝\"><a class=\"markdownIt-Anchor\" href=\"#拷贝\">#</a> 拷贝</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;xiaoming&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;...obj&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1 === obj);<span class=\"comment\">//false</span></span><br><span class=\"line\">obj1.<span class=\"property\">name</span> = <span class=\"string\">&quot;xiaohong&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>);<span class=\"comment\">//xiaoming</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"合并\"><a class=\"markdownIt-Anchor\" href=\"#合并\">#</a> 合并</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;xiaoming&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">sex</span>: <span class=\"string\">&quot;male&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;...obj, ...obj1&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2);<span class=\"comment\">//&#123;name: &quot;xiaoming&quot;, age: 18, sex: &quot;male&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数\">#</a> 箭头函数</h3>\n<ul>\n<li>箭头函数实现了一种更加简洁的书写方式。箭头函数内部没有 arguments，也没有 prototype 属性，所以不能用 new 关键字调用箭头函数</li>\n<li>箭头函数和普通函数最大的区别在于其内部 this 永远指向其父级对象的 this。(重点)</li>\n</ul>\n<h3 id=\"解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#解构赋值\">#</a> 解构赋值</h3>\n<p>- 解构赋值是对赋值运算符的扩展。它是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。<br>\n字符串、以及 ES6 新增的 Map 和 Set 都可以使用解构表达式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d, e] = <span class=\"string\">&quot;Hello&quot;</span>;<span class=\"comment\">// 字符串解构</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; name, age, sex &#125; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;xiaoming&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&quot;male&quot;</span> &#125;;<span class=\"comment\">// 对象解构</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]; <span class=\"comment\">// 数组解构</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,..<span class=\"property\">b</span>] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];  <span class=\"comment\">//...是剩余运算符，表示赋值运算符右边除第一个值外剩余的都赋值给b</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a,b);<span class=\"comment\">//1,[2,3]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]; <span class=\"comment\">// 嵌套数组解构</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"promise\"><a class=\"markdownIt-Anchor\" href=\"#promise\">#</a> Promise</h3>\n<h4 id=\"asyncawait语法糖\"><a class=\"markdownIt-Anchor\" href=\"#asyncawait语法糖\">#</a> async/await 语法糖</h4>\n<h3 id=\"模块化\"><a class=\"markdownIt-Anchor\" href=\"#模块化\">#</a> 模块化</h3>\n<h3 id=\"新增对象\"><a class=\"markdownIt-Anchor\" href=\"#新增对象\">#</a> 新增对象</h3>\n<h4 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> Set</h4>\n<ul>\n<li>可以理解为后端的 Set 集合对象 (ArrayList)</li>\n<li>Set 对象和 Map 对象类似，但它存储不是键值对。类似数组，但它的每个元素都是唯一的。</li>\n<li>WeakSet</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">set.<span class=\"title function_\">delete</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">set.<span class=\"title function_\">has</span>(<span class=\"number\">2</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map</h4>\n<ul>\n<li>\n<p>Map 对象用于保存键值对，任何值 JavaScript 支持的值都可以作为一个键（key）或者一个值（value）。与对象不同的是：</p>\n</li>\n<li>\n<p>object 的键只能是字符串或 ES6 的 symbol 值，而 Map 可以是任何值。</p>\n</li>\n<li>\n<p>Map 对象有一个 size 属性，存储了键值对的个数，而 object 对象没有类似属性。</p>\n</li>\n<li>\n<p>WeakMap</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;xiaoming&quot;</span>);</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;sex&quot;</span>, <span class=\"string\">&quot;male&quot;</span>);</span><br><span class=\"line\">map.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// &quot;xiaoming&quot;</span></span><br><span class=\"line\">map.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map.<span class=\"property\">size</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">map.<span class=\"title function_\">clear</span>(); <span class=\"comment\">// 清空map</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"forof\"><a class=\"markdownIt-Anchor\" href=\"#forof\">#</a> for…of</h3>\n<ul>\n<li>for…of 循环是 ES6 引入的一种新的循环机制，用于遍历可迭代对象（如数组、字符串等）的元素。在字符串上使用 for…of 可以方便地遍历字符串中的每个字符。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">et str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"forin\"><a class=\"markdownIt-Anchor\" href=\"#forin\">#</a> for…in</h3>\n<p>(阮一峰 ECMAScript 6 (ES6) 标准入门教程 第三版)[<a href=\"https://www.bookstack.cn/read/es6-3rd/sidebar.md\">https://www.bookstack.cn/read/es6-3rd/sidebar.md</a>]</p>\n",
            "tags": [
                "学习",
                "面试",
                "前端"
            ]
        },
        {
            "id": "https://riddddder.github.io/2021/07/10/Javascript%E9%9D%A2%E8%AF%95/",
            "url": "https://riddddder.github.io/2021/07/10/Javascript%E9%9D%A2%E8%AF%95/",
            "title": "前端笔记（一）：javascript基础",
            "date_published": "2021-07-10T09:51:56.000Z",
            "content_html": "<h2 id=\"javascript笔记\"><a class=\"markdownIt-Anchor\" href=\"#javascript笔记\">#</a> javascript 笔记</h2>\n<h3 id=\"js的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#js的数据类型\">#</a> js 的数据类型</h3>\n<p>基本数据类型：Number、String、Boolean、Null、Undefined、Object、（Symbol、bigInt）<br>\n引用数据类型：Array、Function、Object<br>\nNull 只有一个值，是 null。不存在的对象。<br>\nUndefined 只有一个值，是 undefined。没有初始化。undefined 是从 null 中派生出来的。<br>\n简单理解就是：undefined 是没有定义的，null 是定义了但是为空。</p>\n<p>Symbol 类型的对象永远不相等，即便创建的时候传入相同的值。因此，可以用解决属性名冲突的问题（适用于多少编码），做为标记。</p>\n<h3 id=\"varletconst的区别\"><a class=\"markdownIt-Anchor\" href=\"#varletconst的区别\">#</a> var，let，const 的区别</h3>\n<ul>\n<li>var 全局变量，能重复声明</li>\n<li>let 局部变量，代码块内有效，不能重复声明</li>\n<li>const 常量，一旦声明，常量的值就不能改变，就必须立即初始化，不能留到以后赋值</li>\n</ul>\n<h3 id=\"es6有哪些新特性\"><a class=\"markdownIt-Anchor\" href=\"#es6有哪些新特性\">#</a> es6 有哪些新特性</h3>\n<ul>\n<li>let const</li>\n<li>模板字符串</li>\n<li>扩展运算符</li>\n<li>解构赋值</li>\n<li>箭头函数</li>\n<li>Promise、async/await</li>\n<li>数组新方法：map、filter、reduce、some、every</li>\n</ul>\n<h3 id=\"检测数组类型的方法\"><a class=\"markdownIt-Anchor\" href=\"#检测数组类型的方法\">#</a> 检测数组类型的方法</h3>\n<ul>\n<li>instanceof of， 例：arr instanceof Array</li>\n<li>constructor , 例：arr.constructor === Array</li>\n<li>Array.isArray(arr)</li>\n<li>call 方法，例：Object.prototype.toString.call (arr) === ‘[object Array]’</li>\n</ul>\n<h3 id=\"数组的方法\"><a class=\"markdownIt-Anchor\" href=\"#数组的方法\">#</a> 数组的方法</h3>\n<ul>\n<li>改变原数组：push、pop、shift、unshift、sort、splice、reverse</li>\n<li>不改变原属组：concat、join、map、forEach、filter、slice</li>\n</ul>\n<h3 id=\"字符串方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串方法\">#</a> 字符串方法</h3>\n<p>1 charAt (x) 返回字符串中 x 字符的位置，下标从 0 开始<br>\n 2 charCodeAt (x) 返回字符串中 x 位置处字符的 unicode 值<br>\n 3 concat () 用于连接两个或多个字符串<br>\n 4 fromCharcode () 将一组 Unicode 码转换为字符<br>\n 5 indexOf (substr, [start]) 返回某个指定的字符串值在字符串中首次出现的位置。如果没有找到匹配的字符串则返回 -1。<br>\n6 lastIndexOf (substr, [start]) 返回指定文本在字符串中最后一次出现的索引，如果未找到，则返回 - 1。<br>\n7 match (regexp) 根据正则表达式在字符串中搜索匹配项。如果没有找到匹配项，则返回 null。<br>\n8 replace (regexp/substr, replacetext) 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串<br>\n 9 search (regexp) 检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，如果找到，返回与 regexp 相匹配的子串的起始位置，否则返回 -1。<br>\n10 slice (start, [end]) 裁取字符串的某个部分，返回一个新的字符串。包括字符串从 start 开始（包括 start）到 end 结束（不包括 end）为止的所有字符<br>\n 11 split (delimiter, [limit]) split () 方法用于把一个字符串分割成字符串数组，返回一个字符串数组，返回的数组中的字串不包括 delimiter 自身。 可选的 “limit” 是一个整数，允许各位指定要返回的最大数组的元素个数。<br>\n12 substr (start, [length]) 在字符串中抽取从 start 下标开始的指定数目的字符。返回一个新的字符串，包含从 start（包括 start 所指的字符） 处开始的 length 个字符。如果没有指定 length，那么返回的字符串包含从 start 到该字符串的结尾的字符。<br>\n13 substring (start,stop) 用于提取字符串中介于两个指定下标之间的字符<br>\n 14 toLowerCase () 把字符串转换为小写。<br>\n15 toUpperCase () 把字符串转换为大写。<br>\n16 includes () 检查字符串是否包含指定的字符串或字符。<br>\n17 endsWith () 检查字符串是否以指定的字符串或字符结束。<br>\n18 repeat () 将字符串复制指定次数。<br>\n19 valueOf () 返回一个 String 对象的原始值（primitive value），该值等同于 String.prototype.toString ()。<br>\n20 trim () 从一个字符串的两端删除空白字符。</p>\n<h3 id=\"匿名函数和箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#匿名函数和箭头函数\">#</a> 匿名函数和箭头函数</h3>\n<ul>\n<li>function 后并没有给函数命名，而是把整个函数直接赋值给变量 abs，调用时通过 abs (9) 来调用此函数。</li>\n<li>箭头函数的定义用的就是一个箭头。箭头函数表面上相当于匿名函数，并且简化了函数定义。<br>\n当箭头函数只包含一个表达式时，它连 {…} 和 return 都省掉了。</li>\n</ul>\n<h3 id=\"水平垂直居中的方法\"><a class=\"markdownIt-Anchor\" href=\"#水平垂直居中的方法\">#</a> 水平垂直居中的方法</h3>\n<h4 id=\"定位法\"><a class=\"markdownIt-Anchor\" href=\"#定位法\">#</a> 定位法</h4>\n<ul>\n<li>定位，position: absolute; top: 0; left: 0; bottom: 0; right: 0; margin: auto;</li>\n<li>定位，position: absolute; top: 50%; left: 50%; transform: translate (-50%, -50%);</li>\n<li>定位，(已知子元素宽高) width:100px;height:100px;position: absolute; top: 50%; left: 50%; margin-left: -50px; margin-top: -50px;</li>\n</ul>\n<h4 id=\"flex布局\"><a class=\"markdownIt-Anchor\" href=\"#flex布局\">#</a> flex 布局</h4>\n<ul>\n<li>diplay: flex; justify-content: center; align-items: center;</li>\n</ul>\n<h4 id=\"grid网格布局\"><a class=\"markdownIt-Anchor\" href=\"#grid网格布局\">#</a> grid 网格布局</h4>\n<ul>\n<li>diplay: grid; align-items:center;justify-content: center;</li>\n</ul>\n<h4 id=\"table表格布局\"><a class=\"markdownIt-Anchor\" href=\"#table表格布局\">#</a> table 表格布局</h4>\n<ul>\n<li>设置父元素为 display:table-cell，子元素设置 display: inline-block。利用 vertical 和 text-align 可以让所有的行内块级元素水平垂直居中</li>\n</ul>\n<h3 id=\"继承的方式\"><a class=\"markdownIt-Anchor\" href=\"#继承的方式\">#</a> 继承的方式</h3>\n<ul>\n<li>原型继承：不能传参</li>\n<li>组合继承： 调用了两次父类的构造函数，不共享父类引用属性</li>\n<li>寄生组合继承：</li>\n<li>ES6 的 extend：子类只要继承父类，可以不写 constructor ，一旦写了，则在 constructor 中的第一句话必须是 super</li>\n</ul>\n<h3 id=\"深拷贝和浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝和浅拷贝\">#</a> 深拷贝和浅拷贝</h3>\n<h4 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h4>\n<ul>\n<li>\n<p>JSON.parse(JSON.stringify(obj))</p>\n</li>\n<li>\n<p>递归拷贝</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否为null或者不是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj &amp;&amp; <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是对象还是数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> copy = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (le</span><br><span class=\"line\">  t key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 递归</span></span><br><span class=\"line\">      copy[key] = <span class=\"title function_\">deepCopy</span>(obj[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h4>\n<ul>\n<li>let obj1 = Object.assign({}, obj)</li>\n<li>扩展运算符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; ...obj &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Array.prototype.slice()</li>\n<li>Array.prototype.concat()</li>\n</ul>\n",
            "tags": [
                "学习",
                "面试",
                "前端"
            ]
        }
    ]
}