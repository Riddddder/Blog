{
    "version": "https://jsonfeed.org/version/1",
    "title": "初始设定",
    "description": "",
    "home_page_url": "https://Riddddder.github.io",
    "items": [
        {
            "id": "https://riddddder.github.io/2024/10/24/node%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/",
            "url": "https://riddddder.github.io/2024/10/24/node%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/",
            "title": "（已解决）vue-element-plus-admin打包报错",
            "date_published": "2024-10-24T03:51:00.000Z",
            "content_html": "<h2 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<ul>\n<li>在一次使用<em> vue-element-plus-admin</em> 打包时，出现如下报错:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL ERROR: Ineffective mark-compacts near heap <span class=\"built_in\">limit</span> Allocation failed - JavaScript</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\">#</a> 解决方法</h3>\n<ul>\n<li>安装依赖工具</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install increase-memory-limit --save</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  cross-env --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改 package.json 如下:[LIMIT 大小自己设置]</li>\n</ul>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;fix-memory-limit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env LIMIT=2048 increase-memory-limit&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>最后执行就可以打包啦</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run fix-memory-limit</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "node",
                "报错"
            ]
        },
        {
            "id": "https://riddddder.github.io/2024/01/10/web%E5%AD%A6%E4%B9%A01/",
            "url": "https://riddddder.github.io/2024/01/10/web%E5%AD%A6%E4%B9%A01/",
            "title": "web学习（一）",
            "date_published": "2024-01-10T09:51:56.000Z",
            "content_html": "<h1 id=\"前端面试整理一\"><a class=\"markdownIt-Anchor\" href=\"#前端面试整理一\">#</a> 前端面试整理 (一)</h1>\n<ul>\n<li>js 的数据类型</li>\n<li></li>\n<li></li>\n</ul>\n",
            "tags": [
                "面试",
                "web"
            ]
        },
        {
            "id": "https://riddddder.github.io/2023/01/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/",
            "url": "https://riddddder.github.io/2023/01/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/",
            "title": "怎么处理浏览器兼容性",
            "date_published": "2023-01-29T02:54:42.000Z",
            "content_html": "<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面试官：说说你在工作中是怎么处理浏览器兼容性</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这个问题，是面试官想知道你的学习广度，你的知识体系是否全面。</li>\n<li>其实针对前端三部分（HTML、CSS、JavaScript），考虑浏览器兼容性只有 CSS 和 JavaScript；因为针对 HTML，在开发中就常用的几个标签，浏览器从头到脚都认识，还需要兼容吗？</li>\n<li>针对 CSS 的兼容性，你只需要有添加<strong>浏览器前缀</strong>，<strong>变量转换</strong>等意识即可</li>\n<li>针对 JavaScript 的兼容性，你只需要有<strong>新旧语法兼容</strong>和<strong>新旧函数兼容</strong>意识即可。</li>\n<li>只需要有这两个意识就行，实现也已经不需要从头到尾的写，而是借助工具即可</li>\n</ul>\n<h3 id=\"css-兼容性\"><a class=\"markdownIt-Anchor\" href=\"#css-兼容性\">#</a> CSS 兼容性</h3>\n<h4 id=\"浏览器前缀\"><a class=\"markdownIt-Anchor\" href=\"#浏览器前缀\">#</a> 浏览器前缀</h4>\n<ul>\n<li>浏览器前缀是浏览器厂商为了实验性 CSS 属性而添加的标识符，它们通常用于 CSS 规则的前面。以下是一些常见的浏览器前缀：</li>\n</ul>\n<ol>\n<li>webkit-：用于 Chrome、Safari（WebKit 内核）</li>\n<li>moz-：用于 Firefox（Gecko 内核）</li>\n<li>o-：用于 Opera（Presto 内核，已逐渐淘汰）</li>\n<li>ms-：用于 Internet Explorer（Trident 内核）</li>\n</ol>\n<ul>\n<li>例如，如果你想要使用 CSS 的 transform 属性，可能需要添加所有浏览器的前缀：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>); <span class=\"comment\">/* Chrome, Safari */</span></span><br><span class=\"line\">  -moz-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);    <span class=\"comment\">/* Firefox */</span></span><br><span class=\"line\">  -ms-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);     <span class=\"comment\">/* IE */</span></span><br><span class=\"line\">  -o-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);      <span class=\"comment\">/* Opera */</span></span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);         <span class=\"comment\">/* 标准语法 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为了简化这个过程，可以使用一些工具自动添加浏览器前缀：</li>\n</ul>\n<ol>\n<li>Autoprefixer：一个后处理工具，可以根据 Can I Use 的数据自动添加所需的浏览器前缀。</li>\n<li>PostCSS：一个使用 JavaScript 的插件系统，可以处理 CSS 的转换，包括添加前缀。</li>\n</ol>\n<h4 id=\"变量转换\"><a class=\"markdownIt-Anchor\" href=\"#变量转换\">#</a> 变量转换</h4>\n<ul>\n<li>CSS 变量的兼容性问题较少，因为它们已经成为 CSS 的一个标准部分。</li>\n<li>但是，为了确保在不支持 CSS 变量的旧浏览器中也能正常显示，可以使用以下方法：</li>\n</ul>\n<ol>\n<li>回退值：在 var () 函数中提供回退值。</li>\n<li>PostCSS：使用 PostCSS 插件将 CSS 变量转换为静态值。</li>\n</ol>\n<h3 id=\"javascript-的兼容性\"><a class=\"markdownIt-Anchor\" href=\"#javascript-的兼容性\">#</a> JavaScript 的兼容性</h3>\n<ul>\n<li>再来说说 JavaScript 的兼容性吧，针对新旧语法的兼容可以作转换，而针对新旧函数的兼容就需要加补丁。</li>\n</ul>\n<h4 id=\"babel\"><a class=\"markdownIt-Anchor\" href=\"#babel\">#</a> babel</h4>\n<ul>\n<li>其实在开发过程中，最常见的就是跟 JavaScript 打交道，也会真实感受到 JavaScript 存在新的语法，那么这些新的语法就需要转化，才能被浏览器认识。那么这时候就可以借助一个工具 babel。用于专门来降低 JavaScript 语法的。</li>\n<li>babel 就是一个编译器，把一段源代码转化成另外一段新代码，新代码就能被浏览器识别。对了，既然 babel 是工具（postcss 也是一样），能单独使用，也能够配合使用。而我们在项目开发过程中，都会使用构建工具（比如说 webpack），但是又想使用 babel 工具，那么这时候就需要一个桥梁，而 webpack 中的桥梁就是 babel-loader，具体怎么操作你回去研究一下。</li>\n</ul>\n<h4 id=\"polyfill\"><a class=\"markdownIt-Anchor\" href=\"#polyfill\">#</a> polyfill</h4>\n<ul>\n<li>\n<p>手动打补丁</p>\n</li>\n<li>\n<p>根据覆盖率自动打补丁</p>\n</li>\n<li>\n<p>根据浏览器特性，动态打补丁</p>\n</li>\n<li>\n<p>JS 代码能够被转化减低，适配了市场占比的浏览器，是不是就已经完成了呢？当然没有。<br>\n在 ES6 中出现了 Promise，fetch，以及数组和字符串新的方法，babel 会进行转化吗？会转化成什么呢？肯定不会被转化撒，因为它们都是函数调用，对于 babel 来说就是一个普通的函数调用，只是找不到函数的实现体而已，只是会报错而已。</p>\n</li>\n<li>\n<p>那么这里也就需要兼容一下，因为新版本的浏览器是认识的，老版本的浏览器是不认识的，那么这里就需要为了兼容了老版浏览器，新部署一个 JS 文件（类似补丁），里面存放了各个函数（promise, fetch）体的实现代码。然后浏览器就能够正常的识别了。</p>\n</li>\n</ul>\n<h3 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\">#</a> 参考文章</h3>\n<p><a href=\"https://juejin.cn/post/7237022892055281724\">掘金 - 面试官：说说你在工作中是怎么处理浏览器兼容性</a></p>\n",
            "tags": [
                "web",
                "浏览器",
                "兼容性"
            ]
        },
        {
            "id": "https://riddddder.github.io/2022/10/13/hello-hexo/",
            "url": "https://riddddder.github.io/2022/10/13/hello-hexo/",
            "title": "Hello Hexo",
            "date_published": "2022-10-13T11:21:44.000Z",
            "content_html": "<h2 id=\"hexo介绍\"><a class=\"markdownIt-Anchor\" href=\"#hexo介绍\">#</a> hexo 介绍</h2>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h2 id=\"安装前准备\"><a class=\"markdownIt-Anchor\" href=\"#安装前准备\">#</a> 安装前准备</h2>\n<ul>\n<li>Node.js 12.0 以上版本，<a href=\"https://nodejs.cn\">下载</a></li>\n<li>git <a href=\"https://git-scm.com/download/win\">下载</a></li>\n</ul>\n<p>如果工作需要装了 node 可以安装<a href=\"https://nvm.uihtm.com/\"> nvm</a> 管理多版本 node。</p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>安装好 node 后，执行下列命令就可以完成 blog 文件夹初始化（blog 为任意空文件夹名称）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>然后再执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>就可以看到控制台输出 localhost:4000 就可以在本地浏览器访问啦</p>\n<h2 id=\"主题shoka\"><a class=\"markdownIt-Anchor\" href=\"#主题shoka\">#</a> 主题 shoka</h2>\n<p>在 blog 文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</span><br></pre></td></tr></table></figure>\n<p>在_config.yml 中设置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">shoka</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"主题next\"><a class=\"markdownIt-Anchor\" href=\"#主题next\">#</a> 主题 next</h2>\n<p>在 blog 文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next ./themes/next</span><br></pre></td></tr></table></figure>\n<p>在_config.yml 中设置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"插件hexo-admin\"><a class=\"markdownIt-Anchor\" href=\"#插件hexo-admin\">#</a> 插件 hexo-admin</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$npm</span> install hexo-admin -s</span><br></pre></td></tr></table></figure>\n<p>安装好后 locahost:4000/admin 访问</p>\n<h2 id=\"文章\"><a class=\"markdownIt-Anchor\" href=\"#文章\">#</a> 文章</h2>\n<h3 id=\"新建草稿\"><a class=\"markdownIt-Anchor\" href=\"#新建草稿\">#</a> 新建草稿</h3>\n<ul>\n<li>草稿是没发布是不会显示的</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new draft 草稿文件名</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建文章\"><a class=\"markdownIt-Anchor\" href=\"#新建文章\">#</a> 新建文章</h3>\n<ul>\n<li>-p, --path: 自定义新文章的路径</li>\n<li>-r, --replace: 如果存在同名文章，将其替换</li>\n<li>-s, --slug: 文章的 Slug，作为新文章的文件名和发布后的 URL</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new 文章标题</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布\"><a class=\"markdownIt-Anchor\" href=\"#发布\">#</a> 发布</h2>\n<h3 id=\"发布草稿\"><a class=\"markdownIt-Anchor\" href=\"#发布草稿\">#</a> 发布草稿</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish 文章文件名</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除文章缓存\"><a class=\"markdownIt-Anchor\" href=\"#清除文章缓存\">#</a> 清除文章缓存</h3>\n<ul>\n<li>发布前需要清除存在的缓存 db.json 和 public 文件夹下的静态文件。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成静态文件\"><a class=\"markdownIt-Anchor\" href=\"#生成静态文件\">#</a> 生成静态文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署\"><a class=\"markdownIt-Anchor\" href=\"#部署\">#</a> 部署</h3>\n<ul>\n<li>部署到 git 上，需要先<strong>配置 git</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ol>\n<li>[hexo 官网] <a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a></li>\n<li>[front-matter] <a href=\"https://hexo.io/zh-cn/docs/front-matter.html\">https://hexo.io/zh-cn/docs/front-matter.html</a></li>\n<li>[shoka-github] <a href=\"https://github.com/amehime/hexo-theme-shoka?tab=readme-ov-file\">https://github.com/amehime/hexo-theme-shoka?tab=readme-ov-file</a></li>\n<li>[shoka 文档] <a href=\"https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/</a></li>\n<li>[next 官网] <a href=\"https://theme-next.iissnan.com/\">https://theme-next.iissnan.com/</a></li>\n</ol>\n",
            "tags": [
                "hexo"
            ]
        }
    ]
}