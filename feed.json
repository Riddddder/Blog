{
    "version": "https://jsonfeed.org/version/1",
    "title": "初始设定",
    "description": "",
    "home_page_url": "https://Riddddder.github.io",
    "items": [
        {
            "id": "https://riddddder.github.io/2024/11/01/%E5%89%8D%E7%AB%AF%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "url": "https://riddddder.github.io/2024/11/01/%E5%89%8D%E7%AB%AF%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",
            "title": "前端的性能优化",
            "date_published": "2024-11-01T06:40:22.000Z",
            "content_html": "<h2 id=\"前端性能指标\"><a class=\"markdownIt-Anchor\" href=\"#前端性能指标\">#</a> 前端性能指标</h2>\n<p>load（Onload Event），它代表页面中依赖的所有资源加载完的事件。<br>\nDCL（DOMContentLoaded），DOM 解析完毕。<br>\nFP（First Paint），表示渲染出第一个像素点。FP 一般在 HTML 解析完成或者解析一部分时候触发。<br>\nFCP（First Contentful Paint），表示渲染出第一个内容，这里的 “内容” 可以是文本、图片、canvas。<br>\nFMP（First Meaningful Paint），首次渲染有意义的内容的时间，“有意义” 没有一个标准的定义，FMP 的计算方法也很复杂（建议不使用，或者结合产品经理讨论使用）。<br>\nLCP（largest contentful Paint），最大内容渲染时间。</p>\n<h2 id=\"体验优化\"><a class=\"markdownIt-Anchor\" href=\"#体验优化\">#</a> 体验优化</h2>\n<p>从用户角度而言，优化能够让页面加载得更快、对用户的操作响应得更及时，能够给用户提供更为友好的体验。</p>\n<ol>\n<li>首屏渲染优化，请求少、加载体积小、善用缓存</li>\n<li>动画优化，避免某些动画造成页面的卡顿</li>\n<li>优化用户的操作感官，提升视觉反馈，比如 hover 小手，让用户一眼就知道是否可操作</li>\n<li>长列表复用 dom，优化滚动效果及页面卡顿现象，减少页面一次性渲染的数量</li>\n<li>骨架屏的使用</li>\n<li>组件的预加载，懒加载</li>\n</ol>\n<h2 id=\"提升页面性能\"><a class=\"markdownIt-Anchor\" href=\"#提升页面性能\">#</a> 提升页面性能</h2>\n<p>减少 http 请求 和 冗余数据<br>\n组件，路由懒加载<br>\n配置 Nginx 优化<br>\n优化 Webpack 打包机制<br>\n使用 CDN<br>\n 预渲染<br>\n SSR<br>\n 图片转 base64<br>\n 后台分布式部署，负载均衡</p>\n<h2 id=\"首页加载优化减少白屏时间\"><a class=\"markdownIt-Anchor\" href=\"#首页加载优化减少白屏时间\">#</a> 首页加载优化（减少白屏时间）</h2>\n<ul>\n<li>cdn 分发：通过在多台服务器部署相同的副本，当用户访问时，服务器根据用户跟哪台服务器地理距离小或者哪台服务器此时的压力小，来决定哪台服务器去响应这个请求。<br>\n后台在业务层的缓存：数据库查询缓存是可以设置缓存的，这个对于高频率的请求很有用。值得注意的是，接口也是可以设置缓存的，比如获取一定时间内不会变的资源，设置缓存会很有用。</li>\n<li>静态文件缓存方案：这个最常看到。现在流行的方式是文件 hash + 强缓存 的一个方案。比如 hash + cache control：max-age=1 年。</li>\n<li>前端的资源动态加载：<br>\na. 路由动态加载，最常用的做法，以页面为单位，进行动态加载。<br>\nb. 组件动态加载（offScreen Component），对于不在当前视窗的组件，先不加载。<br>\nc. 图片懒加载 (offScreen Image)，同上。值得庆幸的是，越来越多的浏览器支持原生的懒加载，通过给 img 标签加上 loading=“lazy” 来开启懒加载模式。</li>\n<li>利用好 async 和 defer 这两个属性：如果是独立功能的 js 文件，可以加入 async 属性。如果是优先级低且没有依赖的 js，我们可以加入 defer 属性。</li>\n<li>渲染的优先级：浏览器有一套资源的加载优先级策略，也可以通过 js 来自己控制请求的顺序和渲染的顺序。一般我们不需要这么细粒度的控制，而且控制的代码也很不好写。</li>\n<li>前端做一些接口缓存：前端也可以做接口缓存，缓存的位置有两个，一个是内存，即保存给变量，另一个是 localStorage。比如用户的签到日历（展示用户是否签到），我们可以缓存这样的接口到 localStorage ，有效期是当天。或者有个列表页，我们总是缓存上次的列表内容到本地，下次加载时，我们先从本地读取缓存，并同时发起请求到服务器获取最新列表。</li>\n<li>页面使用骨架屏：意思是在首屏加载完成之前，通过渲染一些简单元素进行占位。骨架屏虽然不能提高首屏加载速度，但可以减少用户在首屏等待的急躁情绪。这点很有效，在很多成熟的网站都有大量应用。</li>\n<li>使用 SSR 渲染：服务器性能一般都很好，那么可以先在服务器先把 vdom 计算完成后，再输出给前端，这样可以节约的时间为：计算量 / (服务器计算速度 - 客户端计算速度) 。第二个是服务器可以把首屏的 ajax 请求在服务端阶段就完成，这样可以省去和客户端通过 tcp 传输的时间。</li>\n<li>引入 http2.0：http2.0 对比 http1.1，最主要的提升是传输性能，特别是在接口小而多的时候。</li>\n<li>选择先进的图片格式：使用 JPEG 2000，JPEG XR，and WebP 的图片格式来代替现有的 jpeg 和 png ，当页面图片较多时，这点作用非常明显。把部分大容量的图片从 BaseLine JPEG 切换成 Progressive JPEG （理解这两者的差别）也能缩小体积。</li>\n<li>利用好 http 压缩：使用 http 压缩的效果非常明显。</li>\n</ul>\n",
            "tags": [
                "面试",
                "前端"
            ]
        },
        {
            "id": "https://riddddder.github.io/2024/10/24/Node%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/",
            "url": "https://riddddder.github.io/2024/10/24/Node%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/",
            "title": "（已解决）vue-element-plus-admin打包报错",
            "date_published": "2024-10-24T10:51:00.000Z",
            "content_html": "<h2 id=\"问题描述\"><a class=\"markdownIt-Anchor\" href=\"#问题描述\">#</a> 问题描述</h2>\n<ul>\n<li>在一次使用<em> vue-element-plus-admin</em> 打包时，出现如下报错:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FATAL ERROR: Ineffective mark-compacts near heap <span class=\"built_in\">limit</span> Allocation failed - JavaScript</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题原因\"><a class=\"markdownIt-Anchor\" href=\"#问题原因\">#</a> 问题原因</h2>\n<ul>\n<li>node 内存泄漏耗尽，JavaScript 堆内存不足。因为 Node 是基于 V8 引擎，在 Node 中通过 JavaScript 使用内存时只能使用部分内存。</li>\n</ul>\n<h2 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\">#</a> 解决方法</h2>\n<ul>\n<li>安装依赖工具</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install increase-memory-limit --save</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install  cross-env --save</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改 package.json 如下:[LIMIT 大小自己设置]</li>\n</ul>\n <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;fix-memory-limit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cross-env LIMIT=2048 increase-memory-limit&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>最后执行就可以打包啦</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run fix-memory-limit</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "node",
                "报错"
            ]
        },
        {
            "id": "https://riddddder.github.io/2024/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%B7%AF%E7%94%B1%E6%94%B9%E9%80%A0/",
            "url": "https://riddddder.github.io/2024/08/26/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%B7%AF%E7%94%B1%E6%94%B9%E9%80%A0/",
            "title": "小程序的路由改造",
            "date_published": "2024-08-26T11:59:24.000Z",
            "content_html": "<p>众所周知，在小程序中跳转页面的方法除了 navigateTo，还有 redirectTo，reLaunch，switchTab。</p>\n<p>但是这些方法都有一些限制，比如 redirectTo 和 reLaunch 不能打开 tabBar 页面，navigateTo 和 switchTab 不能打开非 tabBar 页面。</p>\n<p>为了解决这个问题，我们需要对小程序的路由进行改造，使其能够满足我们的需求。</p>\n<p>首先，我们需要创建一个全局的路由对象，用于存储所有的页面路径和对应的页面组件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = &#123;</span><br><span class=\"line\">  <span class=\"attr\">pages</span>: [],</span><br><span class=\"line\">  <span class=\"title function_\">addPage</span>(<span class=\"params\">page</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pages</span>.<span class=\"title function_\">push</span>(page);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">getPage</span>(<span class=\"params\">path</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">pages</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">page</span> =&gt;</span> page.<span class=\"property\">path</span> === path);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br></pre></td></tr></table></figure>\n<p>然后，我们需要在每个页面组件中注册自己的路径和对应的页面组件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">addPage</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/pages/index/index&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./index&#x27;</span>).<span class=\"property\">default</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>接下来，我们需要在 app.js 中初始化路由对象，并注册全局的路由方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">App</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">onLaunch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化路由对象</span></span><br><span class=\"line\">    router.<span class=\"property\">pages</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">pages</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">navigateTo</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = router.<span class=\"title function_\">getPage</span>(options.<span class=\"property\">url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (page) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果页面存在，则跳转到对应的页面</span></span><br><span class=\"line\">      page.<span class=\"property\">component</span>.<span class=\"title function_\">navigateTo</span>(options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果页面不存在，则跳转到404页面</span></span><br><span class=\"line\">      wx.<span class=\"title function_\">navigateTo</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/pages/404/404&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">redirectTo</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> page = router.<span class=\"title function_\">getPage</span>(options.<span class=\"property\">url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (page) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果页面存在，则跳转到对应的页面</span></span><br><span class=\"line\">      page.<span class=\"property\">component</span>.<span class=\"title function_\">redirectTo</span>(options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果页面不存在，则跳转到404页面</span></span><br><span class=\"line\">      wx.<span class=\"title function_\">redirectTo</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/pages/404/404&#x27;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 其他路由方法...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>最后，我们需要在每个页面组件中实现自己的路由方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Page</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">navigateTo</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    wx.<span class=\"title function_\">navigateTo</span>(options);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">redirectTo</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    wx.<span class=\"title function_\">redirectTo</span>(options);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 其他页面方法...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>通过以上改造，我们就可以在全局范围内使用统一的路由方法，并且可以根据需要动态加载页面组件。这样不仅提高了代码的可维护性，还使得路由管理更加灵活和可扩展。</p>\n",
            "tags": [
                "小程序"
            ]
        },
        {
            "id": "https://riddddder.github.io/2023/11/04/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0-%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/",
            "url": "https://riddddder.github.io/2023/11/04/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0-%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/",
            "title": "前端笔记：节流和防抖",
            "date_published": "2023-11-04T08:16:29.000Z",
            "content_html": "<h2 id=\"区别\"><a class=\"markdownIt-Anchor\" href=\"#区别\">#</a> 区别</h2>\n<p>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效<br>\n防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p>\n<h2 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\">#</a> 应用场景</h2>\n<p>节流：滚动条监听、搜索框输入<br>\n防抖：输入框搜索、窗口大小 resize</p>\n<h2 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\">#</a> 实现</h2>\n<p>节流:</p>\n<ul>\n<li>一定时间内的无论点击多少次，都只会执行第一次，其余的直接 return</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttled1</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldtime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> newtime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newtime - oldtime &gt;= delay) &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, args)</span><br><span class=\"line\">            oldtime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttled2</span>(<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">                timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttled</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> starttime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curTime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() <span class=\"comment\">// 当前时间</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> remaining = delay - (curTime - starttime)  <span class=\"comment\">// 从上一次到现在，还剩下多少多余时间</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span></span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(context, args)</span><br><span class=\"line\">            starttime = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timer = <span class=\"built_in\">setTimeout</span>(fn, remaining);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>防抖:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, wait</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>; <span class=\"comment\">// 保存this指向</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>; <span class=\"comment\">// 拿到event对象</span></span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timeout)</span><br><span class=\"line\">        timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            func.<span class=\"title function_\">apply</span>(context, args)</span><br><span class=\"line\">        &#125;, wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, wait, immediate</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> context = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) <span class=\"built_in\">clearTimeout</span>(timeout); <span class=\"comment\">// timeout 不为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (immediate) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> callNow = !timeout; <span class=\"comment\">// 第一次会立即执行，以后只有事件执行后才会再次触发</span></span><br><span class=\"line\">            timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;, wait)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">                func.<span class=\"title function_\">apply</span>(context, args)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                func.<span class=\"title function_\">apply</span>(context, args)</span><br><span class=\"line\">            &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://riddddder.github.io/2023/10/31/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/",
            "url": "https://riddddder.github.io/2023/10/31/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86-%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/",
            "title": "后台管理系统：权限控制的设计",
            "date_published": "2023-10-31T15:26:23.000Z",
            "content_html": "<h2 id=\"背景\"><a class=\"markdownIt-Anchor\" href=\"#背景\">#</a> 背景</h2>\n<h2 id=\"意义\"><a class=\"markdownIt-Anchor\" href=\"#意义\">#</a> 意义</h2>\n<h2 id=\"权限的分类\"><a class=\"markdownIt-Anchor\" href=\"#权限的分类\">#</a> 权限的分类</h2>\n<h3 id=\"后端权限\"><a class=\"markdownIt-Anchor\" href=\"#后端权限\">#</a> 后端权限</h3>\n<!-- ## 后端的权限设计RBAC -->\n<ul>\n<li>从根不上讲前端仅仅只是视图层的展示，权限的核心是在于服务器中的数据变；</li>\n<li>所以后端才是权限的关键，后端权限可以控制某个用户是否能够查询数据， 是否能够修改数据等操作</li>\n</ul>\n<h3 id=\"前端权限\"><a class=\"markdownIt-Anchor\" href=\"#前端权限\">#</a> 前端权限</h3>\n<ul>\n<li>前端权限的控制本质上来说， 就是控制端的视图层的展示和前端所发送的请求。</li>\n<li>但是只有前端权限控制没有后端权限控制是万万不可的。</li>\n</ul>\n<h2 id=\"前端权限的意义\"><a class=\"markdownIt-Anchor\" href=\"#前端权限的意义\">#</a> 前端权限的意义</h2>\n<ul>\n<li>\n<p>如果仅从能够修改服务器中数据库中的数据层面上讲， 确实只在后端做控制就足够了， 那为什么越来越多的项目也进行了前端权限的控制， 主要有这几方面的好处</p>\n</li>\n<li>\n<p>降低非法操作的可能性<br>\n不怕赃偷就怕贼惦记， 在页面中展示出一个就算点击了也最终会失败的按钮，势必会增加有心者非法操作的可能性</p>\n</li>\n<li>\n<p>尽可能排除不必要清求， 减轻服务器压力<br>\n没必要的请求，操作失败的清求，不具备权限的清求，应该压根就不需要发送，请求少了，自然也会减轻服务器的压力</p>\n</li>\n<li>\n<p>提高用户体验<br>\n根据用户具备的权限为该用户展现自己权限范围内的内容，避免在界面上给用户带来困扰，让用户专注于分内之事</p>\n</li>\n</ul>\n<h2 id=\"前端权限控制的设计思路\"><a class=\"markdownIt-Anchor\" href=\"#前端权限控制的设计思路\">#</a> 前端权限控制的设计思路</h2>\n<h3 id=\"菜单权限\"><a class=\"markdownIt-Anchor\" href=\"#菜单权限\">#</a> 菜单权限</h3>\n<ul>\n<li>在登录请求中， 会得到权限数据。前端根据权限数据， 展示对应的菜单，点击菜单才能查看相关的界面</li>\n</ul>\n<h3 id=\"按钮超链接权限\"><a class=\"markdownIt-Anchor\" href=\"#按钮超链接权限\">#</a> 按钮 / 超链接权限</h3>\n<ul>\n<li>在某个菜单的界面中， 还得根据权限数据， 展示出可进行操作的按钮，比如删除， 修改， 增加</li>\n</ul>\n<h3 id=\"界面控制权限\"><a class=\"markdownIt-Anchor\" href=\"#界面控制权限\">#</a> 界面控制权限</h3>\n<ul>\n<li>如果用户没有登录， 手动在地址栏敲入管理界面的地址， 则需要跳转到登录界面</li>\n<li>如果用户已经登录， 如果手动敲入非权限内的地址， 则需要跳转 404 界面</li>\n</ul>\n<h3 id=\"请求和响应的控制\"><a class=\"markdownIt-Anchor\" href=\"#请求和响应的控制\">#</a> 请求和响应的控制</h3>\n<ul>\n<li>如果用户通过非常规操作， 比如通过浏览器调试工具将某些禁用的按钮变成启用状态， 此时发的请求， 也应该被前端所拦截</li>\n</ul>\n<h2 id=\"前端权限控制的实现\"><a class=\"markdownIt-Anchor\" href=\"#前端权限控制的实现\">#</a> 前端权限控制的实现</h2>\n<h3 id=\"权限菜单栏控制\"><a class=\"markdownIt-Anchor\" href=\"#权限菜单栏控制\">#</a> 权限菜单栏控制</h3>\n<ul>\n<li>用户登录之后服务端返回一个数据，这个数据有菜单列表和 token，我们把这个数据放入到 vuex 中，然后主页根据 vuex 中的数据进行菜单列表的渲染<br>\n问题： 刷新界面 vuex 数据消失，菜单栏消失<br>\n解决： 将数据存储在 sessionStorage 中，并让其和 vuex 中的数据保持同步</li>\n</ul>\n<h3 id=\"界面的控制\"><a class=\"markdownIt-Anchor\" href=\"#界面的控制\">#</a> 界面的控制</h3>\n<ul>\n<li>路由导航守卫</li>\n<li>动态路由</li>\n</ul>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://riddddder.github.io/2023/01/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/",
            "url": "https://riddddder.github.io/2023/01/29/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/",
            "title": "怎么处理浏览器兼容性",
            "date_published": "2023-01-29T02:54:42.000Z",
            "content_html": "<h2 id=\"浏览器兼容性\"><a class=\"markdownIt-Anchor\" href=\"#浏览器兼容性\">#</a> 浏览器兼容性</h2>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">面试官：说说你在工作中是怎么处理浏览器兼容性</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这个问题，是面试官想知道你的学习广度，你的知识体系是否全面。</li>\n<li>其实针对前端三部分（HTML、CSS、JavaScript），考虑浏览器兼容性只有 CSS 和 JavaScript；因为针对 HTML，在开发中就常用的几个标签，浏览器从头到脚都认识，还需要兼容吗？</li>\n<li>针对 CSS 的兼容性，你只需要有添加<strong>浏览器前缀</strong>，<strong>变量转换</strong>等意识即可</li>\n<li>针对 JavaScript 的兼容性，你只需要有<strong>新旧语法兼容</strong>和<strong>新旧函数兼容</strong>意识即可。</li>\n<li>只需要有这两个意识就行，实现也已经不需要从头到尾的写，而是借助工具即可</li>\n</ul>\n<h2 id=\"css-兼容性\"><a class=\"markdownIt-Anchor\" href=\"#css-兼容性\">#</a> CSS 兼容性</h2>\n<h3 id=\"浏览器前缀\"><a class=\"markdownIt-Anchor\" href=\"#浏览器前缀\">#</a> 浏览器前缀</h3>\n<ul>\n<li>浏览器前缀是浏览器厂商为了实验性 CSS 属性而添加的标识符，它们通常用于 CSS 规则的前面。以下是一些常见的浏览器前缀：</li>\n</ul>\n<ol>\n<li>webkit-：用于 Chrome、Safari（WebKit 内核）</li>\n<li>moz-：用于 Firefox（Gecko 内核）</li>\n<li>o-：用于 Opera（Presto 内核，已逐渐淘汰）</li>\n<li>ms-：用于 Internet Explorer（Trident 内核）</li>\n</ol>\n<ul>\n<li>例如，如果你想要使用 CSS 的 transform 属性，可能需要添加所有浏览器的前缀：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>); <span class=\"comment\">/* Chrome, Safari */</span></span><br><span class=\"line\">  -moz-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);    <span class=\"comment\">/* Firefox */</span></span><br><span class=\"line\">  -ms-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);     <span class=\"comment\">/* IE */</span></span><br><span class=\"line\">  -o-<span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);      <span class=\"comment\">/* Opera */</span></span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">45deg</span>);         <span class=\"comment\">/* 标准语法 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为了简化这个过程，可以使用一些工具自动添加浏览器前缀：</li>\n</ul>\n<ol>\n<li>Autoprefixer：一个后处理工具，可以根据 Can I Use 的数据自动添加所需的浏览器前缀。</li>\n<li>PostCSS：一个使用 JavaScript 的插件系统，可以处理 CSS 的转换，包括添加前缀。</li>\n</ol>\n<h3 id=\"变量转换\"><a class=\"markdownIt-Anchor\" href=\"#变量转换\">#</a> 变量转换</h3>\n<ul>\n<li>CSS 变量的兼容性问题较少，因为它们已经成为 CSS 的一个标准部分。</li>\n<li>但是，为了确保在不支持 CSS 变量的旧浏览器中也能正常显示，可以使用以下方法：</li>\n</ul>\n<ol>\n<li>回退值：在 var () 函数中提供回退值。</li>\n<li>PostCSS：使用 PostCSS 插件将 CSS 变量转换为静态值。</li>\n</ol>\n<h2 id=\"javascript-的兼容性\"><a class=\"markdownIt-Anchor\" href=\"#javascript-的兼容性\">#</a> JavaScript 的兼容性</h2>\n<ul>\n<li>再来说说 JavaScript 的兼容性吧，针对新旧语法的兼容可以作转换，而针对新旧函数的兼容就需要加补丁。</li>\n</ul>\n<h3 id=\"babel\"><a class=\"markdownIt-Anchor\" href=\"#babel\">#</a> babel</h3>\n<ul>\n<li>其实在开发过程中，最常见的就是跟 JavaScript 打交道，也会真实感受到 JavaScript 存在新的语法，那么这些新的语法就需要转化，才能被浏览器认识。那么这时候就可以借助一个工具 babel。用于专门来降低 JavaScript 语法的。</li>\n<li>babel 就是一个编译器，把一段源代码转化成另外一段新代码，新代码就能被浏览器识别。对了，既然 babel 是工具（postcss 也是一样），能单独使用，也能够配合使用。而我们在项目开发过程中，都会使用构建工具（比如说 webpack），但是又想使用 babel 工具，那么这时候就需要一个桥梁，而 webpack 中的桥梁就是 babel-loader，具体怎么操作你回去研究一下。</li>\n</ul>\n<h3 id=\"polyfill\"><a class=\"markdownIt-Anchor\" href=\"#polyfill\">#</a> polyfill</h3>\n<ul>\n<li>\n<p>手动打补丁</p>\n</li>\n<li>\n<p>根据覆盖率自动打补丁</p>\n</li>\n<li>\n<p>根据浏览器特性，动态打补丁</p>\n</li>\n<li>\n<p>JS 代码能够被转化减低，适配了市场占比的浏览器，是不是就已经完成了呢？当然没有。<br>\n在 ES6 中出现了 Promise，fetch，以及数组和字符串新的方法，babel 会进行转化吗？会转化成什么呢？肯定不会被转化撒，因为它们都是函数调用，对于 babel 来说就是一个普通的函数调用，只是找不到函数的实现体而已，只是会报错而已。</p>\n</li>\n<li>\n<p>那么这里也就需要兼容一下，因为新版本的浏览器是认识的，老版本的浏览器是不认识的，那么这里就需要为了兼容了老版浏览器，新部署一个 JS 文件（类似补丁），里面存放了各个函数（promise, fetch）体的实现代码。然后浏览器就能够正常的识别了。</p>\n</li>\n</ul>\n<h2 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\">#</a> 参考文章</h2>\n<p><a href=\"https://juejin.cn/post/7237022892055281724\">掘金 - 面试官：说说你在工作中是怎么处理浏览器兼容性</a></p>\n",
            "tags": [
                "web",
                "浏览器",
                "兼容性"
            ]
        },
        {
            "id": "https://riddddder.github.io/2021/08/10/localStorage%E5%92%8CsessionStorage/",
            "url": "https://riddddder.github.io/2021/08/10/localStorage%E5%92%8CsessionStorage/",
            "title": "前端笔记（四）：localStorage和sessionStorage",
            "date_published": "2021-08-10T04:51:59.000Z",
            "content_html": "<h2 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\">#</a> 基本概念</h2>\n<p>localStorage 和 sessionStorage 都是 Web Storage API 的一部分，用于在客户端存储数据。它们都是键值对存储，可以存储字符串数据，也可以存储对象数据。</p>\n<h2 id=\"区别\"><a class=\"markdownIt-Anchor\" href=\"#区别\">#</a> 区别</h2>\n<p>localStorage 和 sessionStorage 的主要区别在于数据的生命周期。localStorage 的数据会一直存在，直到手动删除，而 sessionStorage 的数据在页面会话结束时会被清除。</p>\n<h3 id=\"作用域不同\"><a class=\"markdownIt-Anchor\" href=\"#作用域不同\">#</a> 作用域不同</h3>\n<ul>\n<li>sessionStorage 的作用域限定在当前会话（当前浏览器标签页或窗口）。</li>\n<li>localStorage 的作用域是永久的，数据在不同会话（遵循同源策略）之间共享。</li>\n</ul>\n<h3 id=\"生命周期不同\"><a class=\"markdownIt-Anchor\" href=\"#生命周期不同\">#</a> 生命周期不同</h3>\n<ul>\n<li>sessionStorage 的数据在会话结束时被清除，即当用户关闭浏览器标签页或窗口时，sessionStorage 中的数据会被删除。</li>\n<li>localStorage 的数据是持久化的，除非被显式清除，否则会一直保存在客户端。</li>\n</ul>\n<h3 id=\"存储大小不同\"><a class=\"markdownIt-Anchor\" href=\"#存储大小不同\">#</a> 存储大小不同</h3>\n<ul>\n<li>sessionStorage 的存储容量通常比 localStorage 小。一般来说，sessionStorage 的容量限制在 5MB 左右。</li>\n<li>localStorage 的容量限制通常在 5MB 到 10MB 之间，不同浏览器可能会有所不同。</li>\n</ul>\n<h3 id=\"数据共享不同\"><a class=\"markdownIt-Anchor\" href=\"#数据共享不同\">#</a> 数据共享不同</h3>\n<ul>\n<li>sessionStorage 的数据在同一个浏览器标签页或窗口中共享，但不会跨标签页或窗口共享。</li>\n<li>localStorage 的数据在同一个域名下的所有标签页和窗口中共享。</li>\n</ul>\n<h2 id=\"使用场景\"><a class=\"markdownIt-Anchor\" href=\"#使用场景\">#</a> 使用场景</h2>\n<ul>\n<li>sessionStorage 适用于存储需要在同一会话中共享的数据，例如用户的<strong>登录状态</strong>、<strong>表单数据</strong>等。当用户关闭浏览器标签页或窗口时，这些数据会被自动清除。</li>\n<li>localStorage 适用于存储需要在多个会话中共享的数据，例如用户的<strong>偏好设置</strong>、<strong>购物车数据</strong>等。这些数据会一直保存在客户端，直到被显式清除。</li>\n</ul>\n<h2 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\">#</a> 使用方法</h2>\n<h3 id=\"localstorage\"><a class=\"markdownIt-Anchor\" href=\"#localstorage\">#</a> localStorage</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储数据</span></span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;key&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除数据</span></span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">removeItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空所有数据</span></span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">clear</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"sessionstorage\"><a class=\"markdownIt-Anchor\" href=\"#sessionstorage\">#</a> sessionStorage</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 存储数据</span></span><br><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;key&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除数据</span></span><br><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">removeItem</span>(<span class=\"string\">&#x27;key&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清空所有数据</span></span><br><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">clear</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h2>\n<ul>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储遵循同源策略，即只有在相同域名、相同协议和相同端口下的页面才能访问这些数据。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储是同步的，即调用  <code>setItem</code> 、 <code>getItem</code> 、 <code>removeItem</code>  和  <code>clear</code>  方法会立即生效，不会阻塞页面的渲染。因此，在调用这些方法时，需要注意不要在关键路径上使用它们，以免影响页面的性能。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储是字符串类型的，如果需要存储非字符串类型的数据，可以使用  <code>JSON.stringify</code>  和  <code>JSON.parse</code>  方法进行序列化和反序列化。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储是持久化的，即数据不会在页面关闭后自动清除。如果需要清除数据，可以使用  <code>removeItem</code>  或  <code>clear</code>  方法。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储大小有限制，一般为 5MB 左右，不同浏览器可能会有所不同。如果需要存储大量数据，可以考虑使用其他存储方式，如 IndexedDB。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储是安全的，即数据不会被第三方脚本访问。但是，如果页面中存在 XSS 攻击，攻击者可以通过注入恶意脚本访问这些数据。因此，在使用 localStorage 和 sessionStorage 时，需要注意不要存储敏感数据，以免造成安全风险。</p>\n</li>\n<li>\n<p>localStorage 和 sessionStorage 的数据存储是可被浏览器清除的，如用户手动清除浏览器缓存、浏览器崩溃等。因此，在使用 localStorage 和 sessionStorage 时，需要注意数据的持久化和安全性。</p>\n</li>\n</ul>\n",
            "tags": [
                "学习",
                "面试",
                "前端"
            ]
        },
        {
            "id": "https://riddddder.github.io/2021/07/19/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0-ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "url": "https://riddddder.github.io/2021/07/19/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0-ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/",
            "title": "前端笔记：ES6学习笔记",
            "date_published": "2021-07-19T04:32:04.000Z",
            "content_html": "<h2 id=\"es6学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#es6学习笔记\">#</a> ES6 学习笔记</h2>\n<h3 id=\"let和const\"><a class=\"markdownIt-Anchor\" href=\"#let和const\">#</a> let 和 const</h3>\n<h3 id=\"symbol\"><a class=\"markdownIt-Anchor\" href=\"#symbol\">#</a> symbol</h3>\n<ul>\n<li>Symbol 是 ES6 中引入的一种新的基本数据类型，用于表示一个独一无二的值，不能与其他数据类型进行运算。它是 JavaScript 中的第七种数据类型</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">//Symbol()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Symbol</span>();<span class=\"comment\">//报错，Symbol is not a constructor，因为Symbol是基本数据类型，而不是对象，不能 new 。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"class\"><a class=\"markdownIt-Anchor\" href=\"#class\">#</a> class</h3>\n<h3 id=\"字符串新特性\"><a class=\"markdownIt-Anchor\" href=\"#字符串新特性\">#</a> 字符串新特性</h3>\n<h4 id=\"模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#模板字符串\">#</a> 模板字符串</h4>\n<ul>\n<li>使用反引号 `` 和 ${} 来引用变量</li>\n</ul>\n<h4 id=\"字符串新方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串新方法\">#</a> 字符串新方法</h4>\n<ul>\n<li>includes () 判断字符串是否包含参数字符串，返回 boolean 值。</li>\n<li>startsWith () /endsWith ()，判断字符串是否以参数字符串开头或结尾。返回 boolean 值。这两个方法可以有第二个参数，一个数字，表示开始查找的位置</li>\n<li>repeat () 方法按指定次数返回一个新的字符串。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello&quot;</span>.<span class=\"title function_\">repeat</span>(<span class=\"number\">2</span>)<span class=\"comment\">//&quot;hellohello&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>padStart ()/padEnd ()，用参数字符串按给定长度从前面或后面补全字符串，返回新字符串。</li>\n</ul>\n<h3 id=\"数组新方法\"><a class=\"markdownIt-Anchor\" href=\"#数组新方法\">#</a> 数组新方法</h3>\n<p>Array.from () 是内置对象 Array 的方法，实例数组不能调用<br>\n includes () 参数：数值 -------- 返回值：true/false<br>\nmap ()、filter () 参数：函数 -------- 返回值：数组<br>\n forEach () 参数：函数 -------- 返回值：undefined<br>\nfind () 参数：函数 -------- 返回值：数值<br>\n some ()、every () 参数：函数 -------- 返回值：true/false</p>\n<h3 id=\"object新方法\"><a class=\"markdownIt-Anchor\" href=\"#object新方法\">#</a> object 新方法</h3>\n<ul>\n<li><a href=\"http://Object.is\">Object.is</a>()</li>\n<li>Object.assign()</li>\n<li>Object.keys()</li>\n<li>Object.values()</li>\n<li>Object.entries()</li>\n</ul>\n<h3 id=\"对象扩展符\"><a class=\"markdownIt-Anchor\" href=\"#对象扩展符\">#</a> 对象扩展符</h3>\n<h4 id=\"拷贝\"><a class=\"markdownIt-Anchor\" href=\"#拷贝\">#</a> 拷贝</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;xiaoming&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;...obj&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1 === obj);<span class=\"comment\">//false</span></span><br><span class=\"line\">obj1.<span class=\"property\">name</span> = <span class=\"string\">&quot;xiaohong&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>);<span class=\"comment\">//xiaoming</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"合并\"><a class=\"markdownIt-Anchor\" href=\"#合并\">#</a> 合并</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;xiaoming&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">sex</span>: <span class=\"string\">&quot;male&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;...obj, ...obj1&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2);<span class=\"comment\">//&#123;name: &quot;xiaoming&quot;, age: 18, sex: &quot;male&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数\">#</a> 箭头函数</h3>\n<ul>\n<li>箭头函数实现了一种更加简洁的书写方式。箭头函数内部没有 arguments，也没有 prototype 属性，所以不能用 new 关键字调用箭头函数</li>\n<li>箭头函数和普通函数最大的区别在于其内部 this 永远指向其父级对象的 this。(重点)</li>\n</ul>\n<h3 id=\"解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#解构赋值\">#</a> 解构赋值</h3>\n<p>- 解构赋值是对赋值运算符的扩展。它是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。<br>\n字符串、以及 ES6 新增的 Map 和 Set 都可以使用解构表达式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d, e] = <span class=\"string\">&quot;Hello&quot;</span>;<span class=\"comment\">// 字符串解构</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; name, age, sex &#125; = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;xiaoming&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>, <span class=\"attr\">sex</span>: <span class=\"string\">&quot;male&quot;</span> &#125;;<span class=\"comment\">// 对象解构</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]; <span class=\"comment\">// 数组解构</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,..<span class=\"property\">b</span>] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];  <span class=\"comment\">//...是剩余运算符，表示赋值运算符右边除第一个值外剩余的都赋值给b</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a,b);<span class=\"comment\">//1,[2,3]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]; <span class=\"comment\">// 嵌套数组解构</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"promise\"><a class=\"markdownIt-Anchor\" href=\"#promise\">#</a> Promise</h3>\n<h4 id=\"asyncawait语法糖\"><a class=\"markdownIt-Anchor\" href=\"#asyncawait语法糖\">#</a> async/await 语法糖</h4>\n<h3 id=\"模块化\"><a class=\"markdownIt-Anchor\" href=\"#模块化\">#</a> 模块化</h3>\n<h3 id=\"新增对象\"><a class=\"markdownIt-Anchor\" href=\"#新增对象\">#</a> 新增对象</h3>\n<h4 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\">#</a> Set</h4>\n<ul>\n<li>可以理解为后端的 Set 集合对象 (ArrayList)</li>\n<li>Set 对象和 Map 对象类似，但它存储不是键值对。类似数组，但它的每个元素都是唯一的。</li>\n<li>WeakSet</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</span><br><span class=\"line\">set.<span class=\"title function_\">add</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">set.<span class=\"title function_\">delete</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">set.<span class=\"title function_\">has</span>(<span class=\"number\">2</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map</h4>\n<ul>\n<li>\n<p>Map 对象用于保存键值对，任何值 JavaScript 支持的值都可以作为一个键（key）或者一个值（value）。与对象不同的是：</p>\n</li>\n<li>\n<p>object 的键只能是字符串或 ES6 的 symbol 值，而 Map 可以是任何值。</p>\n</li>\n<li>\n<p>Map 对象有一个 size 属性，存储了键值对的个数，而 object 对象没有类似属性。</p>\n</li>\n<li>\n<p>WeakMap</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>();</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;xiaoming&quot;</span>);</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;sex&quot;</span>, <span class=\"string\">&quot;male&quot;</span>);</span><br><span class=\"line\">map.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// &quot;xiaoming&quot;</span></span><br><span class=\"line\">map.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">map.<span class=\"title function_\">has</span>(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(map.<span class=\"property\">size</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\">map.<span class=\"title function_\">clear</span>(); <span class=\"comment\">// 清空map</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"forof\"><a class=\"markdownIt-Anchor\" href=\"#forof\">#</a> for…of</h3>\n<ul>\n<li>for…of 循环是 ES6 引入的一种新的循环机制，用于遍历可迭代对象（如数组、字符串等）的元素。在字符串上使用 for…of 可以方便地遍历字符串中的每个字符。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">et str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> char <span class=\"keyword\">of</span> str) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"forin\"><a class=\"markdownIt-Anchor\" href=\"#forin\">#</a> for…in</h3>\n<p>(阮一峰 ECMAScript 6 (ES6) 标准入门教程 第三版)[<a href=\"https://www.bookstack.cn/read/es6-3rd/sidebar.md\">https://www.bookstack.cn/read/es6-3rd/sidebar.md</a>]</p>\n",
            "tags": [
                "学习",
                "面试",
                "前端"
            ]
        },
        {
            "id": "https://riddddder.github.io/2021/07/10/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0-Javascript%E9%9D%A2%E8%AF%95/",
            "url": "https://riddddder.github.io/2021/07/10/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0-Javascript%E9%9D%A2%E8%AF%95/",
            "title": "前端笔记：javascript基础",
            "date_published": "2021-07-10T09:51:56.000Z",
            "content_html": "<h2 id=\"javascript笔记\"><a class=\"markdownIt-Anchor\" href=\"#javascript笔记\">#</a> javascript 笔记</h2>\n<h3 id=\"js的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#js的数据类型\">#</a> js 的数据类型</h3>\n<p>基本数据类型：Number、String、Boolean、Null、Undefined、Object、（Symbol、bigInt）<br>\n引用数据类型：Array、Function、Object<br>\nNull 只有一个值，是 null。不存在的对象。<br>\nUndefined 只有一个值，是 undefined。没有初始化。undefined 是从 null 中派生出来的。<br>\n简单理解就是：undefined 是没有定义的，null 是定义了但是为空。</p>\n<p>Symbol 类型的对象永远不相等，即便创建的时候传入相同的值。因此，可以用解决属性名冲突的问题（适用于多少编码），做为标记。</p>\n<h3 id=\"varletconst的区别\"><a class=\"markdownIt-Anchor\" href=\"#varletconst的区别\">#</a> var，let，const 的区别</h3>\n<ul>\n<li>var 全局变量，能重复声明</li>\n<li>let 局部变量，代码块内有效，不能重复声明</li>\n<li>const 常量，一旦声明，常量的值就不能改变，就必须立即初始化，不能留到以后赋值</li>\n</ul>\n<h3 id=\"es6有哪些新特性\"><a class=\"markdownIt-Anchor\" href=\"#es6有哪些新特性\">#</a> es6 有哪些新特性</h3>\n<ul>\n<li>let const</li>\n<li>模板字符串</li>\n<li>扩展运算符</li>\n<li>解构赋值</li>\n<li>箭头函数</li>\n<li>Promise、async/await</li>\n<li>数组新方法：map、filter、reduce、some、every</li>\n</ul>\n<h3 id=\"检测数组类型的方法\"><a class=\"markdownIt-Anchor\" href=\"#检测数组类型的方法\">#</a> 检测数组类型的方法</h3>\n<ul>\n<li>instanceof of， 例：arr instanceof Array</li>\n<li>constructor , 例：arr.constructor === Array</li>\n<li>Array.isArray(arr)</li>\n<li>call 方法，例：Object.prototype.toString.call (arr) === ‘[object Array]’</li>\n</ul>\n<h3 id=\"数组的方法\"><a class=\"markdownIt-Anchor\" href=\"#数组的方法\">#</a> 数组的方法</h3>\n<ul>\n<li>改变原数组：push、pop、shift、unshift、sort、splice、reverse</li>\n<li>不改变原属组：concat、join、map、forEach、filter、slice</li>\n</ul>\n<h3 id=\"字符串方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串方法\">#</a> 字符串方法</h3>\n<p>1 charAt (x) 返回字符串中 x 字符的位置，下标从 0 开始<br>\n 2 charCodeAt (x) 返回字符串中 x 位置处字符的 unicode 值<br>\n 3 concat () 用于连接两个或多个字符串<br>\n 4 fromCharcode () 将一组 Unicode 码转换为字符<br>\n 5 indexOf (substr, [start]) 返回某个指定的字符串值在字符串中首次出现的位置。如果没有找到匹配的字符串则返回 -1。<br>\n6 lastIndexOf (substr, [start]) 返回指定文本在字符串中最后一次出现的索引，如果未找到，则返回 - 1。<br>\n7 match (regexp) 根据正则表达式在字符串中搜索匹配项。如果没有找到匹配项，则返回 null。<br>\n8 replace (regexp/substr, replacetext) 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串<br>\n 9 search (regexp) 检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，如果找到，返回与 regexp 相匹配的子串的起始位置，否则返回 -1。<br>\n10 slice (start, [end]) 裁取字符串的某个部分，返回一个新的字符串。包括字符串从 start 开始（包括 start）到 end 结束（不包括 end）为止的所有字符<br>\n 11 split (delimiter, [limit]) split () 方法用于把一个字符串分割成字符串数组，返回一个字符串数组，返回的数组中的字串不包括 delimiter 自身。 可选的 “limit” 是一个整数，允许各位指定要返回的最大数组的元素个数。<br>\n12 substr (start, [length]) 在字符串中抽取从 start 下标开始的指定数目的字符。返回一个新的字符串，包含从 start（包括 start 所指的字符） 处开始的 length 个字符。如果没有指定 length，那么返回的字符串包含从 start 到该字符串的结尾的字符。<br>\n13 substring (start,stop) 用于提取字符串中介于两个指定下标之间的字符<br>\n 14 toLowerCase () 把字符串转换为小写。<br>\n15 toUpperCase () 把字符串转换为大写。<br>\n16 includes () 检查字符串是否包含指定的字符串或字符。<br>\n17 endsWith () 检查字符串是否以指定的字符串或字符结束。<br>\n18 repeat () 将字符串复制指定次数。<br>\n19 valueOf () 返回一个 String 对象的原始值（primitive value），该值等同于 String.prototype.toString ()。<br>\n20 trim () 从一个字符串的两端删除空白字符。</p>\n<h3 id=\"匿名函数和箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#匿名函数和箭头函数\">#</a> 匿名函数和箭头函数</h3>\n<ul>\n<li>function 后并没有给函数命名，而是把整个函数直接赋值给变量 abs，调用时通过 abs (9) 来调用此函数。</li>\n<li>箭头函数的定义用的就是一个箭头。箭头函数表面上相当于匿名函数，并且简化了函数定义。<br>\n当箭头函数只包含一个表达式时，它连 {…} 和 return 都省掉了。</li>\n</ul>\n<h3 id=\"水平垂直居中的方法\"><a class=\"markdownIt-Anchor\" href=\"#水平垂直居中的方法\">#</a> 水平垂直居中的方法</h3>\n<h4 id=\"定位法\"><a class=\"markdownIt-Anchor\" href=\"#定位法\">#</a> 定位法</h4>\n<ul>\n<li>定位，position: absolute; top: 0; left: 0; bottom: 0; right: 0; margin: auto;</li>\n<li>定位，position: absolute; top: 50%; left: 50%; transform: translate (-50%, -50%);</li>\n<li>定位，(已知子元素宽高) width:100px;height:100px;position: absolute; top: 50%; left: 50%; margin-left: -50px; margin-top: -50px;</li>\n</ul>\n<h4 id=\"flex布局\"><a class=\"markdownIt-Anchor\" href=\"#flex布局\">#</a> flex 布局</h4>\n<ul>\n<li>diplay: flex; justify-content: center; align-items: center;</li>\n</ul>\n<h4 id=\"grid网格布局\"><a class=\"markdownIt-Anchor\" href=\"#grid网格布局\">#</a> grid 网格布局</h4>\n<ul>\n<li>diplay: grid; align-items:center;justify-content: center;</li>\n</ul>\n<h4 id=\"table表格布局\"><a class=\"markdownIt-Anchor\" href=\"#table表格布局\">#</a> table 表格布局</h4>\n<ul>\n<li>设置父元素为 display:table-cell，子元素设置 display: inline-block。利用 vertical 和 text-align 可以让所有的行内块级元素水平垂直居中</li>\n</ul>\n<h3 id=\"继承的方式\"><a class=\"markdownIt-Anchor\" href=\"#继承的方式\">#</a> 继承的方式</h3>\n<ul>\n<li>原型继承：不能传参</li>\n<li>组合继承： 调用了两次父类的构造函数，不共享父类引用属性</li>\n<li>寄生组合继承：</li>\n<li>ES6 的 extend：子类只要继承父类，可以不写 constructor ，一旦写了，则在 constructor 中的第一句话必须是 super</li>\n</ul>\n<h3 id=\"深拷贝和浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝和浅拷贝\">#</a> 深拷贝和浅拷贝</h3>\n<h4 id=\"深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝\">#</a> 深拷贝</h4>\n<ul>\n<li>\n<p>JSON.parse(JSON.stringify(obj))</p>\n</li>\n<li>\n<p>递归拷贝</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是否为null或者不是对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj &amp;&amp; <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 判断是对象还是数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> copy = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (le</span><br><span class=\"line\">  t key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 递归</span></span><br><span class=\"line\">      copy[key] = <span class=\"title function_\">deepCopy</span>(obj[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h4>\n<ul>\n<li>let obj1 = Object.assign({}, obj)</li>\n<li>扩展运算符</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123; ...obj &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Array.prototype.slice()</li>\n<li>Array.prototype.concat()</li>\n</ul>\n",
            "tags": [
                "学习",
                "面试",
                "前端"
            ]
        },
        {
            "id": "https://riddddder.github.io/2021/06/30/hexo%E4%B8%BB%E9%A2%98-NexT%E4%B8%BB%E9%A2%98%E9%A3%9F%E7%94%A8/",
            "url": "https://riddddder.github.io/2021/06/30/hexo%E4%B8%BB%E9%A2%98-NexT%E4%B8%BB%E9%A2%98%E9%A3%9F%E7%94%A8/",
            "title": "hexo主题-NexT主题食用",
            "date_published": "2021-06-30T11:00:03.000Z",
            "content_html": "<p>NexT 主题是一个非常简洁的主题，非常适合新手使用。下面我将介绍如何安装和使用 NexT 主题：</p>\n<h2 id=\"安装主题\"><a class=\"markdownIt-Anchor\" href=\"#安装主题\">#</a> 安装主题</h2>\n<ul>\n<li>这一步直接在<em>博客项目</em>文件中执行，安装好的主题会在 <code>./themes/next</code>  中</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next ./themes/next</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在_config.yml 中设置</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"next的配置\"><a class=\"markdownIt-Anchor\" href=\"#next的配置\">#</a> NexT 的配置</h2>\n<p>打开 <code>./themes/next/_config.yml</code></p>\n<p>搜索 <code>menu</code>  可配置菜单，将需要的菜单注释去掉，并添加菜单项，如：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\"># sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">  <span class=\"comment\"># commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n<p>去掉之后，在浏览器依旧是看不到内容的，需要创建对应页面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;tags&quot;</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>\n<p>并且需要在创建好的页面中添加 <code>type</code>  字段，如：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>\n<p>关于页面可以写点文字介绍自己。</p>\n",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "https://riddddder.github.io/2021/06/29/hello-hexo/",
            "url": "https://riddddder.github.io/2021/06/29/hello-hexo/",
            "title": "Hello Hexo",
            "date_published": "2021-06-29T14:21:44.000Z",
            "content_html": "<h2 id=\"hexo介绍\"><a class=\"markdownIt-Anchor\" href=\"#hexo介绍\">#</a> hexo 介绍</h2>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h2 id=\"安装前准备\"><a class=\"markdownIt-Anchor\" href=\"#安装前准备\">#</a> 安装前准备</h2>\n<ul>\n<li>Node.js 12.0 以上版本，<a href=\"https://nodejs.cn\">下载</a></li>\n<li>git <a href=\"https://git-scm.com/download/win\">下载</a></li>\n</ul>\n<p>如果工作需要装了 node 可以安装<a href=\"https://nvm.uihtm.com/\"> nvm</a> 管理多版本 node。</p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>安装好 node 后，执行下列命令就可以完成 blog 文件夹初始化（blog 为任意空文件夹名称）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>然后再执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>就可以看到控制台输出 localhost:4000 就可以在本地浏览器访问啦</p>\n<h2 id=\"主题shoka\"><a class=\"markdownIt-Anchor\" href=\"#主题shoka\">#</a> 主题 shoka</h2>\n<p>在 blog 文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</span><br></pre></td></tr></table></figure>\n<p>在_config.yml 中设置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">shoka</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"主题next\"><a class=\"markdownIt-Anchor\" href=\"#主题next\">#</a> 主题 next</h2>\n<p>在 blog 文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/next-theme/hexo-theme-next ./themes/next</span><br></pre></td></tr></table></figure>\n<p>在_config.yml 中设置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"插件hexo-admin\"><a class=\"markdownIt-Anchor\" href=\"#插件hexo-admin\">#</a> 插件 hexo-admin</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$npm</span> install hexo-admin -s</span><br></pre></td></tr></table></figure>\n<p>安装好后 locahost:4000/admin 访问</p>\n<h2 id=\"文章\"><a class=\"markdownIt-Anchor\" href=\"#文章\">#</a> 文章</h2>\n<h3 id=\"新建草稿\"><a class=\"markdownIt-Anchor\" href=\"#新建草稿\">#</a> 新建草稿</h3>\n<ul>\n<li>草稿是没发布是不会显示的</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new draft 草稿文件名</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建文章\"><a class=\"markdownIt-Anchor\" href=\"#新建文章\">#</a> 新建文章</h3>\n<ul>\n<li>-p, --path: 自定义新文章的路径</li>\n<li>-r, --replace: 如果存在同名文章，将其替换</li>\n<li>-s, --slug: 文章的 Slug，作为新文章的文件名和发布后的 URL</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new 文章标题</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布\"><a class=\"markdownIt-Anchor\" href=\"#发布\">#</a> 发布</h2>\n<h3 id=\"发布草稿\"><a class=\"markdownIt-Anchor\" href=\"#发布草稿\">#</a> 发布草稿</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish 文章文件名</span><br></pre></td></tr></table></figure>\n<h3 id=\"清除文章缓存\"><a class=\"markdownIt-Anchor\" href=\"#清除文章缓存\">#</a> 清除文章缓存</h3>\n<ul>\n<li>发布前需要清除存在的缓存 db.json 和 public 文件夹下的静态文件。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成静态文件\"><a class=\"markdownIt-Anchor\" href=\"#生成静态文件\">#</a> 生成静态文件</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署\"><a class=\"markdownIt-Anchor\" href=\"#部署\">#</a> 部署</h3>\n<ul>\n<li>部署到 git 上，需要先<strong>配置 git</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ol>\n<li>[hexo 官网] <a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a></li>\n<li>[front-matter] <a href=\"https://hexo.io/zh-cn/docs/front-matter.html\">https://hexo.io/zh-cn/docs/front-matter.html</a></li>\n<li>[shoka-github] <a href=\"https://github.com/amehime/hexo-theme-shoka?tab=readme-ov-file\">https://github.com/amehime/hexo-theme-shoka?tab=readme-ov-file</a></li>\n<li>[shoka 文档] <a href=\"https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/</a></li>\n<li>[next 官网] <a href=\"https://theme-next.iissnan.com/\">https://theme-next.iissnan.com/</a></li>\n</ol>\n",
            "tags": [
                "hexo"
            ]
        }
    ]
}